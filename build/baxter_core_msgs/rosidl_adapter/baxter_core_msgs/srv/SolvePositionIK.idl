// generated from rosidl_adapter/resource/srv.idl.em
// with input from baxter_core_msgs/srv/SolvePositionIK.srv
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/PoseStamped.idl"
#include "sensor_msgs/msg/JointState.idl"

module baxter_core_msgs {
  module srv {
    module SolvePositionIK_Request_Constants {
      @verbatim (language="comment", text=
        "Seed Type Mode" "\n"        "* default (SEED_AUTO) mode: iterate through seed types until first valid" "\n"        "                            solution is found" "\n"        "* setting any other mode:   try only that seed type")
      const uint8 SEED_AUTO = 0;
      const uint8 SEED_USER = 1;
      const uint8 SEED_CURRENT = 2;
      const uint8 SEED_NS_MAP = 3;
    };
    @verbatim (language="comment", text=
      "Endpoint Pose(s) to request Inverse-Kinematics joint solutions for.")
    struct SolvePositionIK_Request {
      sequence<geometry_msgs::msg::PoseStamped> pose_stamp;

      @verbatim (language="comment", text=
        "(optional) Joint Angle Seed(s) for IK solver." "\n"
        "* specify a JointState seed for each pose_stamp, using name[] and position[]" "\n"
        "* empty arrays or a non-default seed_mode will cause user seed to not be used")
      sequence<sensor_msgs::msg::JointState> seed_angles;

      uint8 seed_mode;
    };
    module SolvePositionIK_Response_Constants {
      @verbatim (language="comment", text=
        "result_type[i] == seed type used to find valid solution, joints[i];" "\n"        "otherwise,     == RESULT_INVALID (no valid solution found).")
      const uint8 RESULT_INVALID = 0;
    };
    @verbatim (language="comment", text=
      "joints[i]      == joint angle solution for each pose_state[i]")
    struct SolvePositionIK_Response {
      sequence<sensor_msgs::msg::JointState> joints;

      @verbatim (language="comment", text=
        "NOTE: isValid will be deprecated by result_type in future versions")
      sequence<boolean> is_valid;

      sequence<uint8> result_type;
    };
  };
};
