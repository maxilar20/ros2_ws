// generated from rosidl_adapter/resource/msg.idl.em
// with input from baxter_core_msgs/msg/RobustControllerStatus.msg
// generated code does not contain a copyright notice


module baxter_core_msgs {
  module msg {
    module RobustControllerStatus_Constants {
      const int32 NOT_COMPLETE = 0;
      const int32 COMPLETE_W_FAILURE = 1;
      const int32 COMPLETE_W_SUCCESS = 2;
    };
    @verbatim (language="comment", text=
      "True if the RC is enabled and running, false if not.")
    struct RobustControllerStatus {
      boolean is_enabled;

      @verbatim (language="comment", text=
        "The state of the RC with respect to its completion goal.  One of" "\n"
        "NOT_COMPLETE, COMPLETE_W_FAILURE, or COMPLETE_W_SUCCESS")
      int32 complete;

      @verbatim (language="comment", text=
        "Identifies the sender of the Enable message that the RC is using for its" "\n"
        "commands.  This should correspond to the \"uid\" field of a recently published" "\n"
        "RC *Enable message.")
      string control_uid;

      @verbatim (language="comment", text=
        "Set to true when the RC self-disables as a result of too much time elapsing" "\n"
        "without receiving an Enable message.")
      boolean timed_out;

      @verbatim (language="comment", text=
        "A list of relevant error codes.  Error codes are defined by the individual" "\n"
        "robust controllers, consult a robust controller's documentation to see what" "\n"
        "error codes it generates.")
      sequence<string> error_codes;

      @verbatim (language="comment", text=
        "A list of current labels for the RC's current state. For example, \"fastapproach\"," "\n"
        "\"slowapproach\", etc. Used primarily for the blended RCs, other RCs can leave this" "\n"
        "blank. This will probably contains just one label, but it could contain multiple labels" "\n"
        "in the future.")
      sequence<string> labels;
    };
  };
};
